generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./rpg-forja-estrelar.db"
}

model User {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  passwordHash String   @map("password_hash")
  role         String   @default("player")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  masterCampaigns   Campaign[]      @relation("CampaignMaster")
  campaignUsers     CampaignUser[]
  tokens            Token[]
  characterSheets   CharacterSheet[]
  chatMessages      ChatMessage[]
  notes             Note[]
  sentWhispers      ChatMessage[]   @relation("WhisperTo")

  @@map("users")
}

model Campaign {
  id          Int      @id @default(autoincrement())
  name        String
  system      String   @default("D&D 5e")
  description String?
  masterId    Int      @map("master_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  master          User             @relation("CampaignMaster", fields: [masterId], references: [id], onDelete: Cascade)
  campaignUsers   CampaignUser[]
  scenes          Scene[]
  characterSheets CharacterSheet[]
  chatMessages    ChatMessage[]
  notes           Note[]
  backgroundMusic BackgroundMusic[]
  soundEffects    SoundEffect[]
  invites         CampaignInvite[]

  @@map("campaigns")
}

model CampaignUser {
  campaignId Int      @map("campaign_id")
  userId     Int      @map("user_id")
  role       String   @default("player")
  joinedAt   DateTime @default(now()) @map("joined_at")

  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([campaignId, userId])
  @@map("campaign_users")
}

model Scene {
  id            Int     @id @default(autoincrement())
  campaignId    Int     @map("campaign_id")
  name          String  @default("Cena sem nome")
  backgroundUrl String? @map("background_url")
  gridSize      Int     @default(50) @map("grid_size")
  gridColor     String  @default("#000000") @map("grid_color")
  snapToGrid    Boolean @default(true) @map("snap_to_grid")
  fogOfWarData  String? @map("fog_of_war_data")
  createdAt     DateTime @default(now()) @map("created_at")

  campaign     Campaign      @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  tokens       Token[]
  chatMessages ChatMessage[]

  @@map("scenes")
}

model Token {
  id               Int     @id @default(autoincrement())
  sceneId          Int     @map("scene_id")
  userId           Int?    @map("user_id")
  characterSheetId Int?    @map("character_sheet_id")
  x                Float   @default(0)
  y                Float   @default(0)
  size             Int     @default(1)
  rotation         Float   @default(0)
  imageUrl         String? @map("image_url")
  name             String  @default("Token")
  hp               Int?
  maxHp            Int?    @map("max_hp")
  conditions       String?
  isVisible        Boolean @default(true) @map("is_visible")
  createdAt        DateTime @default(now()) @map("created_at")

  scene          Scene           @relation(fields: [sceneId], references: [id], onDelete: Cascade)
  user           User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  characterSheet CharacterSheet? @relation(fields: [characterSheetId], references: [id], onDelete: SetNull)

  @@map("tokens")
}

model CharacterSheet {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  campaignId Int      @map("campaign_id")
  name       String
  class      String?
  level      Int      @default(1)
  data       String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaign   Campaign    @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  tokens     Token[]
  diceMacros DiceMacro[]

  @@map("character_sheets")
}

model ChatMessage {
  id         Int      @id @default(autoincrement())
  campaignId Int      @map("campaign_id")
  sceneId    Int?     @map("scene_id")
  userId     Int      @map("user_id")
  content    String
  rollData   String?  @map("roll_data")
  emoteData  String?  @map("emote_data")
  isPrivate  Boolean  @default(false) @map("is_private")
  whisperTo  Int?     @map("whisper_to")
  timestamp  DateTime @default(now())

  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  scene       Scene?   @relation(fields: [sceneId], references: [id], onDelete: SetNull)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  whisperUser User?    @relation("WhisperTo", fields: [whisperTo], references: [id], onDelete: SetNull)

  @@map("chat_messages")
}

model Note {
  id         Int      @id @default(autoincrement())
  campaignId Int      @map("campaign_id")
  title      String
  content    String?
  isHandout  Boolean  @default(false) @map("is_handout")
  recipients String?
  createdBy  Int      @map("created_by")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  creator  User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("notes")
}

model DiceMacro {
  id               Int      @id @default(autoincrement())
  characterSheetId Int      @map("character_sheet_id")
  name             String
  expression       String
  description      String?
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  characterSheet CharacterSheet @relation(fields: [characterSheetId], references: [id], onDelete: Cascade)

  @@map("dice_macros")
}

model BackgroundMusic {
  id         Int      @id @default(autoincrement())
  campaignId Int      @map("campaign_id")
  name       String
  url        String
  volume     Float    @default(0.7)
  isLooping  Boolean  @default(true) @map("is_looping")
  isPlaying  Boolean  @default(false) @map("is_playing")
  createdAt  DateTime @default(now()) @map("created_at")

  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("background_music")
}

model SoundEffect {
  id         Int      @id @default(autoincrement())
  campaignId Int      @map("campaign_id")
  name       String
  url        String
  volume     Float    @default(1.0)
  createdAt  DateTime @default(now()) @map("created_at")

  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("sound_effects")
}

model CampaignInvite {
  id         Int      @id @default(autoincrement())
  campaignId Int      @map("campaign_id")
  email      String
  token      String   @unique
  expiresAt  DateTime @map("expires_at")
  used       Boolean  @default(false)
  createdAt  DateTime @default(now()) @map("created_at")

  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("campaign_invites")
}